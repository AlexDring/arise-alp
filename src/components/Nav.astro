---
import Menu from "./Menu.astro"

import { useStoryblokApi } from "@storyblok/astro"
import isPreview from "../utils/isPreview"

const storyblokApi = useStoryblokApi()
const { data } = await storyblokApi.get("cdn/stories/config", {
  version: isPreview() ? "draft" : "published",
  resolve_links: "url"
})
const headerMenu = data?.story?.content?.header_menu
---

<div class="nav-bar at-top" class="full-width">
  <div>
    <img
      src="https://a.storyblok.com/f/321954/5000x2141/34d500aa43/black-on-transparent.png/m/136x59/filters:format(webp)"
      alt="Arise ALP logo"
    />
  </div>
  <nav class="top">
    <button id="menu-toggle" aria-expanded="false" aria-controls="menu">
      <span class="sr-only">Menu</span>
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="36"
        height="36"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="menu-icon"
      >
        <line x1="3" y1="12" x2="21" y2="12"></line>
        <line x1="3" y1="6" x2="21" y2="6"></line>
        <line x1="3" y1="18" x2="21" y2="18"></line>
      </svg>
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="36"
        height="36"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="close-icon"
      >
        <line x1="18" y1="6" x2="6" y2="18"></line>
        <line x1="6" y1="6" x2="18" y2="18"></line>
      </svg>
    </button>
    <!-- <Menu menuItems={headerMenu} /> -->
    <ul id="menu">
      <div class="dropdown-background">
        <span class="arrow"></span>
      </div>
      {
        headerMenu.map((item) => {
          if (item.component === "menu_dropdown_link") {
            return (
              <li class="dropdown-trigger">
                <a
                  href={
                    item.link.cached_url === "/"
                      ? "/"
                      : `/${item.link.cached_url}`
                  }
                >
                  {item.link.story.name}
                  <span class="dropdown-arrow" />
                </a>
                <div class="dropdown-content">
                  <ul>
                    {item.dropdown_menu.map((dropdownItem) => {
                      return (
                        <li>
                          <a
                            href={
                              dropdownItem.link.cached_url === "/"
                                ? "/"
                                : `/${dropdownItem.link.cached_url}`
                            }
                          >
                            {dropdownItem.link.story.name}
                          </a>
                        </li>
                      )
                    })}
                  </ul>
                </div>
              </li>
            )
          }

          return (
            <li>
              <a
                href={
                  item.link.cached_url === "home"
                    ? "/"
                    : `/${item.link.cached_url}`
                }
              >
                {item.link.story.name}
              </a>
            </li>
          )
        })
      }
    </ul>
    <div class="mobile-menu-wrapper">
      <Menu id="mobile-menu" menuItems={headerMenu} />
    </div>
  </nav>
</div>

<style lang="scss">
  .dropdown-trigger.trigger-enter-active {
    position: relative;
    > a:before {
      content: "";
      position: absolute;
      top: 20px;
      left: 0;
      width: 100%;
      height: 100%;
    }
  }
  .dropdown-background {
    width: 230px;
    height: 100px;
    position: absolute;
    border-radius: 10px;
    background-color: #fff;
    box-shadow: var(--drop-shadow);

    opacity: 0;
    transition:
      transform 0.3s,
      opacity 0.1s,
      translate 0.2s;
    transform: translate(50%, 60%);
    display: flex;
    justify-content: center;
    z-index: 1;
    &.open {
      opacity: 1;
    }
  }

  .arrow {
    clip-path: polygon(50% 0%, 0% 100%, 100% 100%);
    box-shadow: var(--drop-shadow);

    background-color: #fff;
    width: 20px;
    height: 10px;
    aspect-ratio: 1;
    position: absolute;
    top: -10px;
    left: 50%;
    transform: translateX(-50%);
    box-shadow: var(--drop-shadow);

    pointer-events: none;
  }

  .dropdown-content {
    opacity: 0;
    position: absolute;
    display: none;
    transition: all 0.5s;
    transform: translate(-50%, 84px);
    left: 50%;
    will-change: transform;
    top: -20px;
    padding: 20px;
    min-width: 230px;
    z-index: 2;
    ul {
      list-style: none;
      padding: 0;
      a {
        width: 100%;
        font-size: 0.9rem !important;
        display: inline-block !important;
      }
    }
  }

  .trigger-enter .dropdown-content {
    display: block;
  }
  .trigger-enter-active .dropdown-content {
    opacity: 1;
  }
</style>
<script>
  const mobileMenu = document.getElementById("mobile-menu")
  const menuToggle = document.getElementById("menu-toggle")

  menuToggle.addEventListener("click", () => {
    mobileMenu.classList.toggle("active")
    menuToggle.setAttribute(
      "aria-expanded",
      mobileMenu.classList.contains("active").toString()
    )
  })

  // Close menu when clicking outside
  document.addEventListener("click", (event) => {
    const target = event.target
    if (!mobileMenu.contains(target) && !menuToggle.contains(target)) {
      mobileMenu.classList.remove("active")
      menuToggle.setAttribute("aria-expanded", "false")
    }
  })

  // Hide/show nav on scroll using requestAnimationFrame and throttling for better performance
  let lastScrollTop = 0
  let ticking = false
  const nav = document.querySelector(".nav-bar")

  window.addEventListener("scroll", () => {
    // Only run if we're not already waiting for an animation frame
    if (!ticking) {
      // requestAnimationFrame syncs our DOM updates with the browser's render cycle
      // This prevents unnecessary reflows and ensures smooth animations
      window.requestAnimationFrame(() => {
        const scrollTop = window.scrollY

        if (scrollTop > lastScrollTop && scrollTop > 100) {
          // Scrolling down & past initial 100px
          nav.classList.add("hide")
        } else {
          // Scrolling up
          nav.classList.remove("hide")
        }

        lastScrollTop = scrollTop
        ticking = false
      })

      ticking = true // Prevent additional calculations until the current frame completes
    }
  })

  // dropdown menu
  const triggers = document.querySelectorAll(".dropdown-trigger")
  const background = document.querySelector(".dropdown-background")
  const topNav = document.querySelector(".top")

  function handleEnter() {
    this.classList.add("trigger-enter")
    setTimeout(() => {
      if (this.classList.contains("trigger-enter")) {
        this.classList.add("trigger-enter-active")
      }
    }, 150)
    background.classList.add("open")

    const dropdown = this.querySelector(".dropdown-content")
    const dropdownCoords = dropdown.getBoundingClientRect()
    const navCoords = topNav.getBoundingClientRect()

    const coords = {
      height: dropdownCoords.height,
      width: dropdownCoords.width,
      top: dropdownCoords.top - navCoords.top,
      left: dropdownCoords.left - navCoords.left
    }
    background.style.setProperty("width", `${coords.width}px`)
    background.style.setProperty("height", `${coords.height}px`)
    background.style.setProperty(
      "transform",
      `translate(${coords.left}px, ${coords.top}px)`
    )
  }

  function handleLeave() {
    this.classList.remove("trigger-enter", "trigger-enter-active")
    background.classList.remove("open")
  }

  triggers.forEach((trigger) =>
    trigger.addEventListener("mouseenter", handleEnter)
  )
  triggers.forEach((trigger) =>
    trigger.addEventListener("mouseleave", handleLeave)
  )
</script>
