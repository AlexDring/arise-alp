---
import { Image } from 'astro:assets'

import logo from '../media/arise-logo.png'
// const currentPath = Astro.url.pathname

import Menu from './Menu.astro'

import { useStoryblokApi } from '@storyblok/astro'
import isPreview from '../utils/isPreview'

const storyblokApi = useStoryblokApi()
const { data } = await storyblokApi.get('cdn/stories/config', {
  version: isPreview() ? 'draft' : 'published',
  resolve_links: 'url'
})
const headerMenu = data?.story?.content?.header_menu
---

<div class="nav-bar at-top" class="full-width">
  <div>
    <Image src={logo} alt="Arise ALP logo" />
  </div>
  <nav>
    <button id="menu-toggle" aria-expanded="false" aria-controls="menu">
      <span class="sr-only">Menu</span>
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="36"
        height="36"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="menu-icon"
      >
        <line x1="3" y1="12" x2="21" y2="12"></line>
        <line x1="3" y1="6" x2="21" y2="6"></line>
        <line x1="3" y1="18" x2="21" y2="18"></line>
      </svg>
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="36"
        height="36"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="close-icon"
      >
        <line x1="18" y1="6" x2="6" y2="18"></line>
        <line x1="6" y1="6" x2="18" y2="18"></line>
      </svg>
    </button>
    <Menu id="menu" menuItems={headerMenu} />
    <div class="mobile-menu-wrapper">
      <Menu id="mobile-menu" menuItems={headerMenu} />
    </div>
  </nav>
</div>

<style lang="scss"></style>
<script>
  const mobileMenu = document.getElementById('mobile-menu')
  const menuToggle = document.getElementById('menu-toggle')

  // menuToggle.addEventListener("click", () => {
  //   if (menuList.classList.contains("is-active")) {
  //     menuList.classList.remove("is-active")
  //     menuToggle.setAttribute("aria-expanded", "false")
  //   } else {
  //     menuList.classList.add("is-active")
  //     menuToggle.setAttribute("aria-expanded", "true")
  //   }
  // })

  menuToggle.addEventListener('click', () => {
    mobileMenu.classList.toggle('active')
    menuToggle.setAttribute(
      'aria-expanded',
      mobileMenu.classList.contains('active').toString()
    )
  })

  // Close menu when clicking outside
  document.addEventListener('click', (event) => {
    const target = event.target
    if (!mobileMenu.contains(target) && !menuToggle.contains(target)) {
      mobileMenu.classList.remove('active')
      menuToggle.setAttribute('aria-expanded', 'false')
    }
  })

  // Hide/show nav on scroll using requestAnimationFrame and throttling for better performance
  let lastScrollTop = 0
  let ticking = false
  const nav = document.querySelector('.nav-bar')

  window.addEventListener('scroll', () => {
    // Only run if we're not already waiting for an animation frame
    if (!ticking) {
      // requestAnimationFrame syncs our DOM updates with the browser's render cycle
      // This prevents unnecessary reflows and ensures smooth animations
      window.requestAnimationFrame(() => {
        const scrollTop = window.scrollY

        if (scrollTop > lastScrollTop && scrollTop > 100) {
          // Scrolling down & past initial 100px
          nav.classList.add('hide')
        } else {
          // Scrolling up
          nav.classList.remove('hide')
        }

        lastScrollTop = scrollTop
        ticking = false
      })

      ticking = true // Prevent additional calculations until the current frame completes
    }
  })
</script>
