---
import { useStoryblokApi } from "@storyblok/astro"
import StoryblokComponent from "@storyblok/astro/StoryblokComponent.astro"
import BaseLayout from "../layouts/BaseLayout.astro"
import isPreview from "../utils/isPreview"

// Debug logging (remove after debugging)
const token = import.meta.env.STORYBLOK_PUBLIC_TOKEN || "not-found"
console.log("Token exists:", !!token)
console.log("Token length:", token.length)
console.log("Token starts with:", token.substring(0, 4) + "...")

// Don't prerender in SSR mode
export const prerender = isPreview() ? false : true

export async function getStaticPaths() {
  console.log("Starting getStaticPaths")

  const storyblokApi = useStoryblokApi()
  console.log("API initialized")

  try {
    const links = await storyblokApi.getAll("cdn/links", {
      // version: isPreview() ? "draft" : "published"
      version: "published"
    })
    console.log("Links fetched, count:", links.length)

    // Filter out system paths and only return valid Storyblok routes
    return links
      .filter((link) => !link.is_folder && link.slug !== undefined)
      .map((link) => {
        return {
          params: {
            slug: link.slug === "home" ? undefined : link.slug
          }
        }
      })
  } catch (error) {
    console.error("Error fetching links:", error.message)
    console.error("Full error:", JSON.stringify(error))
    return []
  }
}

// Add a check for system paths
const { slug } = Astro.params

// Skip processing for system paths, this was throwing a 404 not found error in preview mode
if (slug?.startsWith(".well-known/")) {
  return Astro.redirect("/404")
}

const storyblokApi = useStoryblokApi()

const { data } = await storyblokApi.get(
  `cdn/stories/${slug === undefined ? "home" : slug}`,
  {
    // version: isPreview() ? "draft" : "published"
    version: "published"
  }
)

const story = data.story
---

<BaseLayout>
  <StoryblokComponent blok={story.content} />
</BaseLayout>
